#include "Manager.h"
#define _CRT_SECURE_NO_WARNINGS
#pragma warning(disable:4996)


int Manager::signUp()
{
   //id 입력받기 -> 제대로입력, 중복검사 -> pw 입력받기 -> 4자리숫자 입력 조건 충족 -> text파일에 저장하기
   //id, pw 입력 받을 때 quit 입력시 메인메뉴로 돌아가기
   /**/
   string test_id="", test_pw="";
   regex idChecker1("[a-zA-Z0-9]+");//알파벳/숫자인경우
   //regex idChecker2("^([0-9]+[a-zA-Z]).*$");//숫자먼저시작하는경우

   while (true) {//id roof
      test_id.clear();
      test_pw.clear();
      cout << "id는 숫자와 영문자 조합이며, 6자리~10자리로 입력하세요\nid : ";
      getline(cin, test_id);
      if (!isin0to128(test_id)) {
          cout << "한국어 입력 금지" << endl;
          continue;
      }

      if (isSpace(test_id)) continue;
      else {
         if (!isQuit(test_id)) {//quit 아니면
            if ((test_id.size() >= 6) && (test_id.size() <= 10)) {
               if (regex_match(test_id, idChecker1)) {
                  cout << "조건맞음\n" << endl;
                  readInfoTextFile();//저장되어있는거 읽어오기.
                  int count = 0;
                  for (count = 0; count < user.size(); count++) {//text file 중복검사
                     cout << "저장값 : " << user[count].id.c_str() << "입력값 : " << test_id << endl;
                     if (!strcmp(user[count].id.c_str(), test_id.c_str())) break;
                  }
                  if (count == user.size()) {
                     cout << "중복되는 id 없음\n" << endl;
                     while (true) {//pw roof
                        cout << "pw는 숫자만으로 이루어져 있으며, 4자리로 입력하세요\npw : ";
                        regex pwChecker("^[0-9]{4}$");
                        getline(cin, test_pw);//pw입력받기
                        if (!isin0to128(test_pw)) {
                            cout << "한국어 입력 금지" << endl;
                            continue;
                        }
                        if (regex_match(test_pw, pwChecker)) {
                           cout << "아이디 패스워드 모두 완료\n" << endl;
                           //info.txt에 해당 아이디 패스워드 추가하기.
                           ofstream writeFile;
                           writeFile.open("info.txt", std::ofstream::out | std::ofstream::app);//쓰기모드, 이어서 추가하기
                           if (writeFile.is_open()) {
                              string merge = test_id + "/" + test_pw + "\n";
                              writeFile.write(merge.c_str(), merge.size());
                           }
                           else {
                              cout << "파일 오픈 오류\n" << endl;
                           }
                           writeFile.close();
                           readInfoTextFile();//새로 추가되었으니 user벡터에 추가해주기
                           return 1;
                        }
                        else {
                           cout << "pw 조건 오류\n" << endl;
                        }
                     }
                  }
                  else {
                     cout << "id 중복\n" << endl;
                  }
               }
               else {
                  cout << "영문자와 숫자를 포함하여 주세요\n" << endl;
               }
            }
            else {
               cout << "id 길이 조건 오류\n" << endl;
            }
         }
         else {
            return 0;
         }
      }
   }
}

int Manager::logIn()
{
   cout << "로그인이다\n" << endl;
   regex idChecker1("[a-zA-Z0-9]+");//영어먼저시작하는경우
   //regex idChecker2("^([0-9]+[a-zA-Z]).*$");//숫자먼저시작하겹치다는경우

   while (true) {//로그인 성공하면 current_user에 로그인한 유저 정보 저장됨
      cout << "id : ";
      string test_id, test_pw;
      getline(cin, test_id);
      if (!isin0to128(test_pw)) {
          cout << "한국어 입력 금지" << endl;
          continue;
      }
      if (isSpace(test_id)) continue;
      else {
         if (!isQuit(test_id)) {
            if ((test_id.size() >= 6) && (test_id.size() <= 10)) {
               if (regex_match(test_id, idChecker1)) {
                  readInfoTextFile();//저장되어있는거 읽어오기.
                  readRestTextFile();
                  readR_InfoTextFile();
                  readR_MenuTextFile();
                  int count = 0;
                  for (count = 0; count < user.size(); count++) {//text file 중복검사
                     cout << "아이디저장값 : " << user[count].id.c_str() << "입력값 : " << test_id << endl;
                     if (!strcmp(user[count].id.c_str(), test_id.c_str())) break;
                  }
                  if (count == user.size()) {//중복된 아이디 없으면 다시입력받기
                     cout << "중복된 아이디 없음.\n" << endl;
                  }
                  else {
                     while (true) {
                        cout << "pw : ";
                        regex pwChecker("^[0-9]{4}$");
                        getline(cin, test_pw);//pw입력받기
                        if (!isin0to128(test_pw)) {
                            cout << "한국어 입력 금지" << endl;
                            continue;
                        }
                        if (regex_match(test_pw, pwChecker)) {//pw형식 옳바름
                           if (!strcmp(user[count].pw.c_str(), test_pw.c_str())) {
                              //로그인성공
                              current_user = new User(user[count].id, user[count].pw);
                                for (int i = 0; i < user[count].restaurant.size();i++) {
                                    current_user->restaurant.push_back(Restaurant(user[count].restaurant[i].category,
                                        user[count].restaurant[i].name,
                                        user[count].restaurant[i].address));
                                    current_user->restaurant[i].address = user[count].restaurant[i].address;
                                    current_user->restaurant[i].close_day = user[count].restaurant[i].close_day;
                                    current_user->restaurant[i].open_hour = user[count].restaurant[i].open_hour;
                                    for (int j = 0; j < user[count].restaurant[i].menu.size(); j++) {
                                        current_user->restaurant[i].menu.push_back(Menu(user[count].restaurant[i].menu[j].m_name,
                                            user[count].restaurant[i].menu[j].m_price));
                                    }
                                }
                                cout << "현재 로그인 한 유저의 정보 " << endl;
                                current_user->print();

                              
                              //로그인 성공한 계정 접속
                              cout << "로그인 성공!\n id: " << user[count].id << endl;
                              return 1;
                           }
                           else {
                              cout << "비밀번호가 일치하지 않습니다.\n" << endl;
                           }

                        }
                        else {
                           cout << "옳바르지 않은 pw형식\n" << endl;
                        }
                     }


                  }
               }
            }
            else {
            cout << "id 길이 조건 오류\n" << endl;
            }
         }
         else {
         break;
         }
      }
   }
   return 0;
}

void Manager::loginMenu()
{
   int c = 0;
   string test_menu = "";
   while (c != 4) {
      test_menu.clear();
      cout << "1. 로그인\t2. 회원가입\n>>보기선택 : ";
      
      regex menuChecker("^(1|2){1}$");

      getline(cin, test_menu);
      if (!isin0to128(test_menu)) {
          cout << "한국어 입력 금지" << endl;
          continue;
      }
      if (regex_match(test_menu, menuChecker)) {//입력값이 1 또는 2이면 진행
         const char* buf = test_menu.c_str();//char* buf
         int menu = atoi(buf);//char* to int
         switch (menu) {
         case 1: {
            if (logIn()) c = mainMenu();
         }
              break;
         case 2: {
            if (signUp())
               if (logIn()) c = mainMenu();
         }
              break;
         default:
            cout << "이 문장 절대나오면 안됨 나오면 말해줘.\n" << endl;
            break;
         }
      }
      else {
         cout << "ERROR : input 1 or 2\n" << endl;
      }
   }
}

bool Manager::yesorno()
{
   string c = "";
   regex ynCheck("(y)|(n){1}$");
   while (true) {
      cout << "yes or no?: ";
      getline(cin, c);
      if (!isin0to128(c)) {
          cout << "한국어 입력 금지" << endl;
          continue;
      }
      trim(c);
      if (regex_match(c, ynCheck)) {
         if (!strcmp(c.c_str(), "y")) return 1;
         return 0;
      }
      //y 또는 n 입력 안했을때 다시 위로가서 입력받기
   }
   return false;
}

bool Manager::isDay(string str)
{
    regex Day_Checker("^[a-zA-Z]+(day)$");
    if (regex_match(str, Day_Checker)) {
        if ((str.size() >= 6) && (str.size() <= 9)) {
            int i = 0;
            for (i = 0; i < 7; i++) {
                if (!strcmp(humooil[i].c_str(), str.c_str())) {
                    cout << "요일맞음" << endl;
                    return true;
                }
            }
            if (i == 7) {
                cout << "monday~sunday 입력바람" << endl;
            }
        }
        else {
            cout << "day 길이 6~9 로 입력하세요" << endl;
            return false;
        }
    }
    return false;
}

bool Manager::isTime(string str, vector<string>& v)
{
    regex Time_Checker("([0-9]{1,2})\:([0-9]{1,2})*$");
    smatch sm;
    if (regex_match(str, sm, Time_Checker)) {
        for (int i = 1; i <= 2; i++)
            v.push_back(sm.str(i));

        if ((stoi(sm.str(1)) >= 0) && (stoi(sm.str(1)) <= 23)) {
            if ((stoi(sm.str(2)) >= 0) && (stoi(sm.str(2)) <= 59)) {
                return true;
            }
            else {
                cout << "분 범위 오류" << endl;
                return false;
            }
        }
        else {
            cout << "시간 범위 오류" << endl;
            return false;
        }
    }
    else cout << "시간 형식에 맞게 입력하세요" << endl;
    return false;

}

bool Manager::isAddress(string str)
{
    regex adrChecker("^[a-zA-Z0-9]+(dong)$");//알파벳+숫자만입력
    if (regex_match(str, adrChecker)) {
        if ((str.size() >= 12) && (str.size() <= 13)) {
            int i = 0;
            for (i = 0; i < 10; i++) {
                if (!strcmp(V_address[i].c_str(), str.c_str())) {
                    return true;
                }
            }
            if (i == 10) {
                cout << "hwayang1dong~10dong 입력하세요" << endl;
                return false;
            }
        }
        else {
            cout << "day 길이 12~13 으로 입력하세요" << endl;
            return false;
        }
    }
    return false;
}

int Manager::mainMenu()
{
   while (true) {
      cout << "1. 식당등록\t2.식당관리\t3. 식당검색\t4. 종료 : ";
      regex menuChecker("^([1-4]){1}$");
      string test_menu = "";
      getline(cin, test_menu);
      if (!isin0to128(test_menu)) {
          cout << "한국어 입력 금지" << endl;
          continue;
      }
      if (regex_match(test_menu, menuChecker)) {
         const char* buf = test_menu.c_str();//char* buf
         int menu = atoi(buf);//char* to int
         if (menu == 4) return menu;
         else {
            switch (menu) {
            case 1:
               registerRestaurant();
               break;
            case 2:
                ManageRestaurant();
               break;
            case 3:
                //searchRestaurant();
               break;
            default:
               cout << "이 말 절대나오면안됨" << endl;
               break;
            }
         }
      }
      else {
         cout << "ERROR : input 1 ~ 4\n" << endl;
      }
   }
}

void Manager::registerRestaurant()
{
   vector<User>temp_user;
   int scount = 0;//slash count
   string data="", category="", R_name="", R_address="";
   char* data_buff = nullptr;
   while (true) {
      scount = 0;
      cout << "카테고리/식당이름/식당주소" << endl << "입력하세요<<";
   //   data = "";
      getline(cin,data);
      if (!isin0to128(data)) {
          cout << "한국어 입력 금지" << endl;
          continue;
      }
      trim(data);//앞뒤공백은 자르기
      if (!isQuit(data)) {
          cout << "data : " << data << endl;
          cout << "datasize : " << data.size() << endl;
          data_buff = new char[data.size() + 1];
          strcpy(data_buff, data.c_str());
          for (int i = 0; i < data.size(); i++) {
             if ((int)data[i] == 47)
                scount++;
          }
          cout << "scount : "<<scount << endl;

          if (scount != 2) continue;//슬래시 2개 아니면 다시입력받기
      
          trim(data);//앞뒤공백은 자르기
      
             vector<char*>stv;
             char* ptr1 = strtok(data_buff, "/");
             while (ptr1 != nullptr) {
                stv.push_back(ptr1);
                ptr1 = strtok(NULL, "/");
             }
             if (stv.size() == 3) {
                category = (string)stv[0];
                R_name = (string)stv[1];
                R_address = (string)stv[2];
             }
             else {
                continue;
             }
         
             cout << "category/" << category << "/R_name/" << R_name << "/R_address/" << R_address << endl;
             trim(category);
             trim(R_name);
             trim(R_address);
             cout << "category/" << category << "/R_name/" << R_name << "/R_address/" << R_address << endl;

             regex categoryChecker("^[a-z].*$");
             if (!regex_match(category, categoryChecker)) {
                cout << "카테고리 영문자만 입력하세요" << endl;
                continue;
             }
             else {
                if (!((strcmp(category.c_str(), "japanese") == 0) || (strcmp(category.c_str(), "chinese") == 0) || (strcmp(category.c_str(), "korean") == 0) || (strcmp(category.c_str(), "western") == 0)))
                {//카테고리 검사
                   cout << "2??" << endl;
                   cout << "카테고리 4중에 한개만 입력해주세요ㅅㅂ" << endl;
                   continue;
                }
             }
         
             //이름검사
             regex nameChecker("[a-zA-Z[:space:]]+");
             if (!regex_match(R_name, nameChecker)) {
                cout << "식당 이름 영문자 또는 영문자와 공백 조합으로 입력하세요" << endl;
                continue;
             }
             else {
                for (int i = 0; i < R_name.size(); i++) {
                   R_name[i] = tolower(R_name[i]);
                }
                cout << "R_name : " << R_name << endl;
                vector<char*>v;
                char* buf = new char[R_name.size() + 1];
                strcpy(buf, R_name.c_str());
                char* ptr = strtok(buf, " \t");//공백+탭 조합도 판별하기위함
                while (ptr != nullptr) {
                   cout << "3??" << endl;
                   v.push_back(ptr);
                   ptr = strtok(NULL, " \t");
                }
                string result = "";
                if (v.size() == 1) {
                   result = (string)v[0];
                }
                else {
                   for (int i = 0; i < v.size(); i++) {
                      if (i != v.size() - 1) {
                         result += (string)v[i] + " ";
                      }
                      else {
                         result += (string)v[i];
                      }
                   }
                }
                R_name = result;
                if (R_name.size() < 1 || R_name.size() > 15) {
                    cout << "길이 1~15" << endl;
                    continue;
                }
                //텍스트파일에 식당이름 있나 없나 검사하기
                bool check = false;
                for (int i = 0; i < user.size(); i++) {
                    for (int j = 0; j < user[i].restaurant.size(); j++) {
                        if (!strcmp(user[i].restaurant[j].name.c_str(), R_name.c_str())) {
                            cout << "중복된 식당 이름이 있습니다\n" << endl;
                            check = true;
                            break;
                        }
                    }
                }
                if (check) continue;
             }
             regex adrChecker("[a-zA-Z0-9]+");//알파벳+숫자만입력
             if (!regex_match(R_address, adrChecker)) {
                cout << "영문자만 입력하세요" << endl;
                continue;
             }
             else {
             bool check = false;
             for (int i = 0; i < 10; i++) {//주소검사
                 if (strcmp(R_address.c_str(), V_address[i].c_str()) == 0) {
                     check = true;
                     break;
                 }
                 else {
                     check = false;
                 }
             }
             if (!(check)) {
                 cout << "주소 규칙위반" << endl;
                 continue;
             }
             }

             //모든항목 검사완료시 카테고리: *** 이름: *** 주소: *** 출력 후 y_n 받아야함 
             cout << "카테고리: " << category << "\n이름: " << R_name << "\n주소: " << R_address << endl;
             if (yesorno()) {//current_user의 레스토랑객체벡터에 레스토랑 만들어서 pushback
                 ofstream writeRestaurant;

                 writeRestaurant.open("Restaurant.txt", std::ofstream::out | std::ofstream::app);//쓰기모드, 이어서 추가하기
                 if (writeRestaurant.is_open()) {
                     string merge = current_user->id + "/" + category + "/" + R_name + "/" + R_address + "\n";
                     writeRestaurant.write(merge.c_str(), merge.size());
                 }
                 else {
                     cout << "파일 오픈 오류\n" << endl;
                 }
                 writeRestaurant.close();
                 readRestTextFile();

                 current_user->restaurant.push_back(Restaurant(category, R_name, R_address));
                 current_user->print();

                 cout << "등록완료" << endl;
                 return;
             }
             else {
                 cout << "추가안해\n" << endl;
                 continue;
             }
      }
      else return;
   }

}

void Manager::searchRestaurant()
{
    vector<char*>temp;
    char* ptr = nullptr;
    char* buf = nullptr;
    string data = "", adr = "", time = "", day = "";
    vector<Restaurant>find_R_list;
    while (true) {
        temp.clear();
        int scount = 0;
        cout << "순서 무관하게 3개의 데이터를 / 로 구분하여 입력하세요" << endl;
        cout << "현재 내 지역/시간/요일 :";
        getline(cin, data);
        if (isin0to128(data)) {
            trim(data);
            if (!isQuit(data)) {
                for (int i = 0; i < data.size(); i++) {
                    if ((int)data[i] == 47)
                        scount++;
                }
                if (scount != 2) {
                    cout << "슬래시 2개 입력하지 않으면 안됩니다." << endl;
                    continue;//슬래시 2개 아니면 다시입력받기
                }
                buf = new char[data.size() + 1];
                strcpy(buf, data.c_str());
                ptr = strtok(buf, "/");
                while (ptr != nullptr) {
                    temp.push_back(ptr);
                    ptr = strtok(NULL, "/");
                }
                if (temp.size() != 3) {
                    cout << "데이터 를 각 각 /로 구분하여 3개 입력하세요" << endl;
                    continue;
                }
                vector<string> timeV;
                for (int i = 0; i < temp.size(); i++) {
                    string str = (string)temp[i];
                    trim(str);
                    if (isTime(str, timeV)) time = str;
                    if (isDay(str)) day = str;
                    if (isAddress(str)) adr = str;
                }
                cout << "time : " << time << "/day : " << day << "/adr : " << adr << endl;

                for (int i = 0; i < user.size(); i++) {
                    for (int j = 0; j < user[i].restaurant.size(); i++) {
                        if (!strcmp(user[i].restaurant[j].address.c_str(), adr.c_str())) {
                            //입력한 지역과 식당 주소가 일치하는 식당 발견, 시간 검사 시작
                            //식당 마감시간이 자정 안넘은경우 timeV[0]:입력시간,timeV[1]:입력분
                            
                            if (user[i].restaurant[j].open_hour.size() == 5) {
                                if (strcmp(getDayIndex(adr).c_str(), user[i].restaurant[j].close_day[1].c_str())){
                                    //입력요일이 저장된 휴무일이랑 다를때만 비교하기
                                    if (stoi(timeV[0]) == stoi(user[i].restaurant[j].open_hour[0])) {
                                        if (stoi(timeV[1]) >= stoi(user[i].restaurant[j].open_hour[1])) {//1
                                                find_R_list.push_back(user[i].restaurant[j]);
                                        }
                                    }
                                    if (stoi(timeV[0]) > stoi(user[i].restaurant[j].open_hour[0])) {
                                        if (stoi(timeV[0]) == stoi(user[i].restaurant[j].open_hour[2])) {
                                            if (stoi(timeV[1]) < stoi(user[i].restaurant[j].open_hour[3])) {//2
                                                    find_R_list.push_back(user[i].restaurant[j]);
                                            }
                                        }
                                        if (stoi(timeV[0]) < stoi(user[i].restaurant[j].open_hour[2])) {//3
                                                find_R_list.push_back(user[i].restaurant[j]);
                                        }
                                    }
                                }
                            }
                            else {//마감시간이 자정을 넘은 경우
                                //내 입력시간이 앞범위인지, 뒷 범위인지 확인
                                

                            }

                        }
                    }
                }
            }
            else {
                return;
            }
        }
        else {
            cout << "한글 입력 금지" << endl;
            continue;
        }
    }
    



}

void Manager::readInfoTextFile()
{
   cout << "readInfoTextFile" << endl;
   user.clear();//user 초기화
   char readline[16];//한 줄 최대 16글자 id->10, /->1, pw->4, \n->1
   char** temp_info = new char* [2];
   for (int i = 0; i < 2; i++) {
      temp_info[i] = new char[10];//그냥 크게 10으로 잡음
   }
   ifstream readFile;
   readFile.open("info.txt");
   if (readFile.is_open()) {
      
      while (!readFile.eof()) {
         readFile.getline(readline, 16);
         if (!readFile.eof()) {//eof일때 strtok안해줄라고
            temp_info[0] = strtok(readline, "/");//id
            temp_info[1] = strtok(NULL, "/");//pw

            user.push_back(User(temp_info[0], temp_info[1]));
         }
      }
   }
   else {
      cout << "파일이 오픈되지 않음\n" << endl;
   }
   readFile.close();

  
}

void Manager::readRestTextFile()
{
    cout << "readRestTextFile" << endl;
    for (int i = 0; i < user.size(); i++) {
        user[i].restaurant.clear();
    }
        

    ifstream readRestaurant;
    char** temp_info_R = new char* [4];
    for (int i = 0; i < 4; i++) {
        temp_info_R[i] = new char[16];//그냥 크게 10으로 잡음
    }
    char* ptr = nullptr;
    char readlineR[50];//한 줄 최대 50글자 id->10, /->3, 카테고리->8, 식당이름->15, 주소->13\n->1
    readRestaurant.open("Restaurant.txt");
    if (readRestaurant.is_open()) {
        while (!readRestaurant.eof()) {
            readRestaurant.getline(readlineR, 50);
            if (!readRestaurant.eof()) {//eof일때 strtok안해줄라고
                temp_info_R[0] = strtok(readlineR, "/");//id
                temp_info_R[1] = strtok(NULL, "/");//category
                temp_info_R[2] = strtok(NULL, "/");//식당이름
                temp_info_R[3] = strtok(NULL, "/");//식당주소
                for (int i = 0; i < user.size(); i++) {//회원가입은 했지만 식당 안등록한새끼들은 user객체에 식당없음
                    if (!strcmp(user[i].id.c_str(), temp_info_R[0])) {
                        user[i].restaurant.push_back(Restaurant(temp_info_R[1], temp_info_R[2], temp_info_R[3]));
                        break;
                    }
                }
            }
        }
    }
    else {
        cout << "Restaurant.txt not open\n\n" << endl;
    }
    cout << "readRestaurant close" << endl;
    readRestaurant.close();
}

void Manager::readR_InfoTextFile()
{
    cout << "void Manager::readR_InfoTextFile()" << endl;
    for (int i = 0; i < user.size(); i++) {
        for (int j = 0; j < user[i].restaurant.size(); j++) {
            user[i].restaurant[j].open_hour.clear();
            user[i].restaurant[j].close_day.clear();
        }
    }
    ifstream readR_Info;
    vector<char*>v;
    char* ptr = nullptr;
    char readlineR_I[60];
    readR_Info.open("Restaurant_Info.txt");
    regex timeCheck("([0-9]{1,2})\:([0-9]{1,2})\~([0-9]{1,2})\:([0-9]{1,2})*$");
    regex timeCheck2("([0-9]{1,2})\:([0-9]{1,2})\~([0-9]{1,2})\:([0-9]{1,2})\,([0-9]{1,2})\:([0-9]{1,2})\~([0-9]{1,2})\:([0-9]{1,2})*$");
    smatch match,match2;
    vector<string> temp;
    bool dayflag = true;
    string humoo;
    if (readR_Info.is_open()) {
        while (!readR_Info.eof()) {
            v.clear();
            temp.clear();
            dayflag = true;
            humoo.clear();
            readR_Info.getline(readlineR_I, 60);
            if (!readR_Info.eof()) {
                // "/"기준으로 4개 또는 3개 짤라주기
                //1번째 : 식당이름
                //2번째 : 주소
                //3번째 : 영업시간-> 콤마가 있는지 없는지 검사하기.있으면 콤마 기준으로 짜르기.
                //                   콤마 없으면 : ~ 기준으로 짜르기, 짜른거 : 기준으로 짜르기 저장하기.
                //4번째 : 휴무일
                ptr = strtok(readlineR_I, "/");
                while (ptr != nullptr) {
                    v.push_back(ptr);
                    ptr = strtok(NULL , "/");
                }
                
                if (v.size() == 3) {//휴무일 없는경우시발
                    dayflag = false;
                    humoo = "";
                }
                else { humoo = v[3];}
                string tlqkf = (string)v[2];
                if (regex_match(tlqkf, match, timeCheck)) {//콤마없는경우
                    temp.push_back(match.str(1));
                    temp.push_back(match.str(2));
                    temp.push_back(match.str(3));
                    temp.push_back(match.str(4));
                    temp.push_back(getDayIndex(humoo));
                }
                if (regex_match(tlqkf, match2, timeCheck2)) {
                    temp.push_back(match2.str(1));
                    temp.push_back(match2.str(2));
                    temp.push_back(match2.str(3));
                    temp.push_back(match2.str(4));
                    temp.push_back(getDayIndex(humoo));
                    temp.push_back(match2.str(5));
                    temp.push_back(match2.str(6));
                    temp.push_back(match2.str(7));
                    temp.push_back(match2.str(8));
                    if (!dayflag)
                        temp.push_back(getDayIndex(humoo));
                    else
                        temp.push_back(to_string((stoi(getDayIndex(humoo)) + 1) % 7));
                }
                
                
                for (int i = 0; i < user.size(); i++) {
                    for (int j = 0; j < user[i].restaurant.size(); j++) {
                        if (!strcmp(user[i].restaurant[j].name.c_str(), v[0])) {
                            user[i].restaurant[j].address = v[1];//주소
                            user[i].restaurant[j].open_hour.assign(temp.begin(),temp.end());//영업시간
                            user[i].restaurant[j].close_day.push_back(humoo);
                            user[i].restaurant[j].close_day.push_back(getDayIndex(humoo));
                        }
                    }
                }
                
            }
        }
    }
    else {
        cout << "Restaurant_Info.txt 안열림\n" << endl;
    }
    readR_Info.close();
}

void Manager::readR_MenuTextFile()
{
    //메뉴 최대 3개, 저장금액 최대 5자리
    cout << "readR_MenuTextFile()" << endl;
    for (int i = 0; i < user.size(); i++) {
        for (int j = 0; j < user[i].restaurant.size(); i++) {
            user[i].restaurant[j].menu.clear();
        }
    }
    ifstream readR_Menu;
    readR_Menu.open("Restaurant_Menu.txt");
    char* ptr = nullptr;
    vector<char*>v;
    char buf[85];
    if (readR_Menu.is_open()) {
        
        while (!readR_Menu.eof()) {
            readR_Menu.getline(buf, 85);
            v.clear();
            if (!readR_Menu.eof()) {
                ptr = strtok(buf, "/");
                while (ptr != nullptr) {
                    v.push_back(ptr);
                    ptr = strtok(NULL, "/");
                }
                for (int i = 0; i < user.size(); i++) {
                    for (int j = 0; j < user[i].restaurant.size(); j++) {
                        if (!strcmp(user[i].restaurant[j].name.c_str(), v[0])) {
                            for (int k = 1; k < v.size(); k += 2) {
                                user[i].restaurant[j].menu.push_back(Menu(v[k], v[k + 1]));
                            }
                            break;
                        }
                    }
                }
            }
        }
    }
    else {
        cout << "Restaurant_Menu.txt open error\n" << endl;
    }
}

void Manager::ManageRestaurant()
{

    while (true) {
        int select;
        cout << "<<식당 리스트>>" << endl;
        current_user->printMyRest();
        cout << "보기선택 : ";
        cin >> select;
        cin.ignore();//버퍼 제거 
        if (select == current_user->restaurant.size() + 1) return;

        if (select < current_user->restaurant.size() + 1 && select >= 1) {
            if (!(current_user->restaurant.at(select - 1).menu.empty() || current_user->restaurant.at(select - 1).open_hour.empty())) {
                while (true) {
                    //full info
                    cout << "부가정보 수정" << endl;
                    cout << "1. 메뉴/가격 수정 \n2. 주소/시간/휴무일 수정 \n3. 이전메뉴" << endl;
                    cout << "보기 선택: ";
                    int select_menu2;
                    cin >> select_menu2;
                    cin.ignore();//버퍼 제거
                    if (select_menu2 == 3) break;
                    if (select_menu2 < 3 && select_menu2 >= 1) {
                        if (select_menu2 == 1)
                        {
                            //메뉴수정
                            string M_name, M_price, temp;
                            string input;
                            regex M_name_Checker("[a-zA-Z\\s]*");
                            regex M_price_Checker("^[1-9]?(,|[0-9])[\\S]*");
                            while (true) {
                                vector<Menu>::iterator iter = current_user->restaurant.at(select - 1).menu.begin();
                                current_user->restaurant.at(select - 1).print_menu();
                                cout << "메뉴/(가격) 입력: ";
                                getline(cin, input);
                                char* data_buff = new char[input.size() + 1];
                                strcpy(data_buff, input.c_str());
                                int scount = 0;
                                for (int i = 0; i < input.size(); i++) {
                                    if ((int)input[i] == 47)
                                        scount++;
                                }
                                cout << "scount : " << scount << endl;
                                trim(input);//앞뒤공백은 자르기

                                if (scount == 0 && !isQuit(input)) {
                                    //메뉴만 입력됨 
                                    M_name = input;
                                    for (int i = 0; i < M_name.size(); i++) {
                                        M_name[i] = tolower(M_name[i]);
                                    }
                                    if (regex_match(M_name, M_name_Checker))
                                    {
                                        for (int i = 0; i < M_name.size(); i++) {
                                            M_name[i] = tolower(M_name[i]);
                                        }
                                        bool del_menu = false;
                                        for (int i = 0; i < current_user->restaurant.at(select - 1).menu.size(); i++) {
                                            if (current_user->restaurant.at(select - 1).menu.at(i).m_name == M_name) {
                                                del_menu = true;
                                                break;
                                            }
                                        }
                                        if (del_menu) {
                                            cout << "삭제할 메뉴: " << M_name << endl;
                                            if (yesorno()) {

                                                for (int i = 0; i < current_user->restaurant.at(select - 1).menu.size(); i++) {
                                                    if (current_user->restaurant.at(select - 1).menu.at(i).m_name == M_name) {

                                                        current_user->restaurant.at(select - 1).menu.erase(iter + i);
                                                    }
                                                }

                                                cout << "삭제완료!" << endl;
                                                continue;
                                            }
                                            else {
                                                continue;
                                            }
                                        }
                                        else {
                                            cout << "입력 메뉴얼을 확인하세요" << endl;
                                        }
                                    }

                                }
                                if (!isQuit(input)) {
                                    vector<char*>stv;
                                    char* ptr1 = strtok(data_buff, "/");
                                    while (ptr1 != nullptr) {
                                        stv.push_back(ptr1);
                                        ptr1 = strtok(NULL, "/");
                                    }
                                    if (stv.size() == 2) {
                                        M_name = (string)stv[0];
                                        M_price = (string)stv[1];
                                    }
                                    else {
                                        if (M_price.empty())
                                            cout << "데이터 개수 부족" << endl;
                                        continue;
                                    }
                                    trim(M_name);
                                    trim(M_price);

                                    if (regex_match(M_name, M_name_Checker))
                                    {
                                        for (int i = 0; i < M_name.size(); i++) {
                                            M_name[i] = tolower(M_name[i]);
                                        }
                                        if (!regex_match(M_price, M_price_Checker)) {
                                            cout << "가격 형식 확인" << endl;
                                            continue;
                                        }
                                        bool add = true;
                                        for (int i = 0; i < current_user->restaurant.at(select - 1).menu.size() - 1; i++) {
                                            if (current_user->restaurant.at(select - 1).menu.at(i).m_name == M_name) {
                                                add = false;
                                                break;
                                            }
                                        }
                                        if (M_price.find(",") != -1) {
                                            while (M_price.find(",") != -1)
                                                M_price.replace(M_price.find(","), 1, "");
                                        }
                                        if (add) {
                                            cout << "추가할 메뉴이름: " << M_name << endl;
                                            cout << "추가할 메뉴가격: " << M_price << endl;
                                            if (yesorno()) {

                                                current_user->restaurant.at(select - 1).menu.push_back(Menu(M_name, M_price));
                                                cout << "추가완료!" << endl;
                                                continue;
                                            }
                                            else {
                                                continue;
                                            }

                                        }
                                        cout << "메뉴이름: " << M_name << endl;
                                        cout << "수정된 메뉴가격: " << M_price << endl;
                                        if (yesorno()) {
                                            for (int i = 0; i < current_user->restaurant.at(select - 1).menu.size() - 1; i++) {
                                                if (current_user->restaurant.at(select - 1).menu.at(i).m_name == M_name) {

                                                    current_user->restaurant.at(select - 1).menu.at(i).m_price = M_price;
                                                }
                                            }
                                            cout << "수정완료!" << endl;
                                        }
                                        else {
                                            continue;
                                        }
                                    }
                                    else if (regex_match(M_price, M_name_Checker))
                                    {
                                        temp = M_price;
                                        M_price = M_name;
                                        M_name = temp;
                                        for (int i = 0; i < M_name.size(); i++) {
                                            M_name[i] = tolower(M_name[i]);
                                        }
                                        if (!regex_match(M_price, M_price_Checker)) {
                                            cout << "가격 형식 확인" << endl;
                                            continue;
                                        }
                                        if (M_price.find(",") != -1) {
                                            while (M_price.find(",") != -1)
                                                M_price.replace(M_price.find(","), 1, "");
                                        }
                                        cout << "메뉴이름: " << M_name << endl;
                                        cout << "수정된 메뉴가격: " << M_price << endl;
                                        if (yesorno()) {
                                            for (int i = 0; i < current_user->restaurant.at(select - 1).menu.size() - 1; i++) {
                                                if (current_user->restaurant.at(select - 1).menu.at(i).m_name == M_name) {

                                                    current_user->restaurant.at(select - 1).menu.at(i).m_price = M_price;
                                                }
                                            }
                                            cout << "수정완료!" << endl;
                                            continue;
                                        }
                                        else {
                                            continue;
                                        }
                                    }
                                    else {//둘다 정규식 안맞음->재입력
                                        cout << "메뉴/가격 형식 확인바람" << endl;
                                        continue;
                                    }
                                }
                                else
                                {
                                    break;
                                }
                            }
                            continue;
                        }
                        else if (select_menu2 == 2)
                        {//정보 수정

                            string hour, close_day, temp;
                            string input;
                            regex Time_Checker("([0-9]{1,2})\:([0-9]{1,2})\~([0-9]{1,2})\:([0-9]{1,2})*$");
                            regex Day_Checker("^[a-zA-Z]+(DAY|DAy|DaY|Day|day|daY|dAY|dAy)$");
                            regex adrChecker("[a-zA-Z0-9]+");//알파벳+숫자만입력
                            while (true) {
                                current_user->restaurant.at(select - 1).print_info2();
                                cout << "시간/휴무정보: ";
                                getline(cin, input);
                                char* data_buff = new char[input.size() + 1];
                                strcpy(data_buff, input.c_str());
                                //trim(input);//앞뒤공백은 자르기
                                int scount = 0;
                                for (int i = 0; i < input.size(); i++) {
                                    if ((int)input[i] == 47)
                                        scount++;
                                }
                                cout << "scount : " << scount << endl;
                                trim(input);
                                if (isQuit(input)) break;

                                if (scount == 0)
                                {//셋중 하나의 정보
                                    //휴무일 이라면 삭제 or 수정
                                    //시간 이라면 수정
                                    //주소 라면 수정
                                    smatch match_one;
                                    if (regex_match(input, Day_Checker))
                                    {//휴무
                                        for (int i = 0; i < input.size(); i++) {
                                            input[i] = tolower(input[i]);
                                        }
                                        int k = 0;
                                        if (current_user->restaurant.at(select - 1).close_day.at(0) == input) {
                                            cout << "휴무일 " << input << " 삭제?" << endl;
                                            if (yesorno()) {
                                                current_user->restaurant.at(select - 1).close_day.at(0) = "\0";
                                                current_user->restaurant.at(select - 1).close_day.at(1) = "-1";
                                            }
                                            else continue;
                                        }
                                        else {
                                            cout << "휴무일 " << input << " 변경?" << endl;
                                            if (yesorno()) {
                                                current_user->restaurant.at(select - 1).close_day.at(0) = input;
                                                for (k = 0; k < 7; k++) {
                                                    if (humooil[k] == input) {
                                                        current_user->restaurant.at(select - 1).close_day.at(1) = to_string(k);
                                                        cout << input << " " << k;
                                                        cout << "휴무일 수정완료" << endl;
                                                        break;
                                                    }
                                                }
                                            }
                                            else continue;
                                        }
                                    }
                                    else if (regex_match(input, match_one, Time_Checker))
                                    {//시간
                                        string humoo = current_user->restaurant.at(select - 1).open_hour.at(4);
                                        current_user->restaurant.at(select - 1).open_hour.clear();

                                        if (stoi(match_one.str(1)) == stoi(match_one.str(3)) && stoi(match_one.str(2)) == stoi(match_one.str(4)))
                                        {
                                            cout << "시작/종료 시간은 같을수 없습니다." << endl;
                                            continue;
                                        }

                                        if (!(stoi(match_one.str(1)) < 24 && stoi(match_one.str(3)) < 24 && stoi(match_one.str(2)) < 60 && stoi(match_one.str(4)) < 60))
                                        {
                                            cout << "24시간 형식에 맞춰주세요" << endl;
                                            continue;
                                        }
                                        cout << "영업시간이 " << input << " 로 변경됨" << endl;
                                        if (yesorno()) {
                                            if (stoi(match_one.str(1)) >= stoi(match_one.str(3)) && stoi(match_one.str(2)) >= stoi(match_one.str(4))) {
                                                //앞시간이 뒷시간 보다 크면나누어 저장
                                                current_user->restaurant.at(select - 1).open_hour.push_back(match_one.str(1));
                                                current_user->restaurant.at(select - 1).open_hour.push_back(match_one.str(2));
                                                current_user->restaurant.at(select - 1).open_hour.push_back("23");
                                                current_user->restaurant.at(select - 1).open_hour.push_back("59");
                                                current_user->restaurant.at(select - 1).open_hour.push_back(humoo);
                                                current_user->restaurant.at(select - 1).open_hour.push_back("00");
                                                current_user->restaurant.at(select - 1).open_hour.push_back("00");
                                                current_user->restaurant.at(select - 1).open_hour.push_back(match_one.str(3));
                                                current_user->restaurant.at(select - 1).open_hour.push_back(match_one.str(4));
                                                current_user->restaurant.at(select - 1).open_hour.push_back(to_string((stoi(humoo) + 1) % 7));
                                            }
                                            else {
                                                //자정을 포함하지 않는 시간
                                                current_user->restaurant.at(select - 1).open_hour.push_back(match_one.str(1));
                                                current_user->restaurant.at(select - 1).open_hour.push_back(match_one.str(2));
                                                current_user->restaurant.at(select - 1).open_hour.push_back(match_one.str(3));
                                                current_user->restaurant.at(select - 1).open_hour.push_back(match_one.str(4));
                                                current_user->restaurant.at(select - 1).open_hour.push_back(humoo);
                                            }
                                            cout << "영업시간수정완료" << endl;
                                        }
                                        else {
                                            continue;
                                        }
                                    }
                                    else
                                    {//주소
                                        bool check = false;
                                        for (int i = 0; i < 10; i++) {//주소검사
                                            if (strcmp(input.c_str(), V_address[i].c_str()) == 0) {
                                                check = true;
                                                break;
                                            }
                                            else {
                                                check = false;
                                            }
                                        }
                                        if (!(check)) {
                                            cout << "주소 규칙위반" << endl;
                                            continue;
                                        }
                                        else {
                                            cout << "주소 " << input << " 으로 변경됨" << endl;
                                            if (yesorno()) {
                                                current_user->restaurant.at(select - 1).address = input;
                                                cout << input << endl;
                                                cout << "주소 수정 완료" << endl;
                                            }
                                            else continue;
                                        }
                                    }
                                    continue;
                                }
                                else if (scount == 1)
                                {//셋중 두개의 정보
                                    string str1, str2;
                                    smatch match2_1, match2_2;
                                    vector<char*>stv;
                                    char* ptr1 = strtok(data_buff, "/");
                                    while (ptr1 != nullptr) {
                                        stv.push_back(ptr1);
                                        ptr1 = strtok(NULL, "/");
                                    }
                                    if (stv.size() == 2) {
                                        str1 = (string)stv[0];
                                        str2 = (string)stv[1];
                                        trim(str1);
                                        trim(str2);
                                    }
                                    else {
                                        cout << "데이터 개수 부족" << endl;
                                        continue;
                                    }
                                    cout << str1 << "/" << str2 << endl;

                                    if (regex_match(str1, Day_Checker))
                                    { //첫문자열이 시간
                                        for (int i = 0; i < str1.size(); i++) {
                                            str1[i] = tolower(str1[i]);
                                        }
                                        int k = 0;
                                        if (current_user->restaurant.at(select - 1).close_day.at(0) == str1) {
                                            //휴무삭제
                                                //시간 주소 판별
                                            if (regex_match(str2, match2_2, Time_Checker))
                                            {//시간

                                                current_user->restaurant.at(select - 1).open_hour.clear();
                                                if (stoi(match2_2.str(1)) == stoi(match2_2.str(3)) && stoi(match2_2.str(2)) == stoi(match2_2.str(4)))
                                                {
                                                    cout << "시작/종료 시간은 같을수 없습니다." << endl;
                                                    continue;
                                                }

                                                if (!(stoi(match2_2.str(1)) < 24 && stoi(match2_2.str(3)) < 24 && stoi(match2_2.str(2)) < 60 && stoi(match2_2.str(4)) < 60))
                                                {
                                                    cout << "24시간 형식에 맞춰주세요" << endl;
                                                    continue;
                                                }
                                                cout << "휴무일 " << str1 << "삭제" << endl;
                                                cout << "영업시간: " << str2 << endl;
                                                if (yesorno()) {
                                                    current_user->restaurant.at(select - 1).close_day.at(0) = "\0";
                                                    current_user->restaurant.at(select - 1).close_day.at(1) = "-1";
                                                    string humoo = current_user->restaurant.at(select - 1).close_day.at(0);
                                                    string index = current_user->restaurant.at(select - 1).close_day.at(1);
                                                    if (stoi(match2_2.str(1)) >= stoi(match2_2.str(3)) && stoi(match2_2.str(2)) >= stoi(match2_2.str(4))) {
                                                        //앞시간이 뒷시간 보다 크면나누어 저장
                                                        current_user->restaurant.at(select - 1).open_hour.push_back(match2_2.str(1));
                                                        current_user->restaurant.at(select - 1).open_hour.push_back(match2_2.str(2));
                                                        current_user->restaurant.at(select - 1).open_hour.push_back("23");
                                                        current_user->restaurant.at(select - 1).open_hour.push_back("59");
                                                        current_user->restaurant.at(select - 1).open_hour.push_back(index);
                                                        current_user->restaurant.at(select - 1).open_hour.push_back("00");
                                                        current_user->restaurant.at(select - 1).open_hour.push_back("00");
                                                        current_user->restaurant.at(select - 1).open_hour.push_back(match2_2.str(3));
                                                        current_user->restaurant.at(select - 1).open_hour.push_back(match2_2.str(4));
                                                        current_user->restaurant.at(select - 1).open_hour.push_back(to_string((stoi(index) + 1) % 7));
                                                    }
                                                    else {
                                                        //자정을 포함하지 않는 시간
                                                        current_user->restaurant.at(select - 1).open_hour.push_back(match2_2.str(1));
                                                        current_user->restaurant.at(select - 1).open_hour.push_back(match2_2.str(2));
                                                        current_user->restaurant.at(select - 1).open_hour.push_back(match2_2.str(3));
                                                        current_user->restaurant.at(select - 1).open_hour.push_back(match2_2.str(4));
                                                        current_user->restaurant.at(select - 1).open_hour.push_back(index);
                                                    }
                                                    cout << "수정완료" << endl;
                                                    break;
                                                }
                                                else {
                                                    continue;
                                                }
                                            }
                                            else
                                            {//주소
                                                bool check = false;
                                                for (int i = 0; i < 10; i++) {//주소검사
                                                    if (strcmp(str2.c_str(), V_address[i].c_str()) == 0) {
                                                        check = true;
                                                        break;
                                                    }
                                                    else {
                                                        check = false;
                                                    }
                                                }
                                                if (!(check)) {
                                                    cout << "주소 규칙위반" << endl;
                                                    continue;
                                                }
                                                else {
                                                    cout << "휴무일 " << str1 << "삭제" << endl;
                                                    cout << "주소 " << str2 << "수정" << endl;
                                                    if (yesorno()) {
                                                        current_user->restaurant.at(select - 1).close_day.at(0) = "\0";
                                                        current_user->restaurant.at(select - 1).close_day.at(1) = "-1";
                                                        current_user->restaurant.at(select - 1).address = str2;
                                                        cout << "수정 완료" << endl;
                                                    }
                                                    else continue;
                                                }
                                            }

                                        }
                                        else {
                                            //휴무변경

                                                //시간 주소 판별 
                                            if (regex_match(str2, match2_2, Time_Checker))
                                            {//시간
                                                current_user->restaurant.at(select - 1).open_hour.clear();
                                                if (stoi(match2_2.str(1)) == stoi(match2_2.str(3)) && stoi(match2_2.str(2)) == stoi(match2_2.str(4)))
                                                {
                                                    cout << "시작/종료 시간은 같을수 없습니다." << endl;
                                                    continue;
                                                }

                                                if (!(stoi(match2_2.str(1)) < 24 && stoi(match2_2.str(3)) < 24 && stoi(match2_2.str(2)) < 60 && stoi(match2_2.str(4)) < 60))
                                                {
                                                    cout << "24시간 형식에 맞춰주세요" << endl;
                                                    continue;
                                                }
                                                cout << "휴무일 " << str1 << " 변경" << endl;
                                                cout << "영업시간: " << str2 << endl;
                                                if (yesorno()) {
                                                    current_user->restaurant.at(select - 1).close_day.at(0) = str1;
                                                    for (k = 0; k < 7; k++) {
                                                        if (humooil[k] == str1) {
                                                            current_user->restaurant.at(select - 1).close_day.at(1) = to_string(k);
                                                            break;
                                                        }
                                                    }
                                                    string humoo = current_user->restaurant.at(select - 1).close_day.at(0);
                                                    string index = current_user->restaurant.at(select - 1).close_day.at(1);
                                                    if (stoi(match2_2.str(1)) >= stoi(match2_2.str(3)) && stoi(match2_2.str(2)) >= stoi(match2_2.str(4))) {
                                                        //앞시간이 뒷시간 보다 크면나누어 저장
                                                        current_user->restaurant.at(select - 1).open_hour.push_back(match2_2.str(1));
                                                        current_user->restaurant.at(select - 1).open_hour.push_back(match2_2.str(2));
                                                        current_user->restaurant.at(select - 1).open_hour.push_back("23");
                                                        current_user->restaurant.at(select - 1).open_hour.push_back("59");
                                                        current_user->restaurant.at(select - 1).open_hour.push_back(index);
                                                        current_user->restaurant.at(select - 1).open_hour.push_back("00");
                                                        current_user->restaurant.at(select - 1).open_hour.push_back("00");
                                                        current_user->restaurant.at(select - 1).open_hour.push_back(match2_2.str(3));
                                                        current_user->restaurant.at(select - 1).open_hour.push_back(match2_2.str(4));
                                                        current_user->restaurant.at(select - 1).open_hour.push_back(to_string((stoi(index) + 1) % 7));
                                                    }
                                                    else {
                                                        //자정을 포함하지 않는 시간
                                                        current_user->restaurant.at(select - 1).open_hour.push_back(match2_2.str(1));
                                                        current_user->restaurant.at(select - 1).open_hour.push_back(match2_2.str(2));
                                                        current_user->restaurant.at(select - 1).open_hour.push_back(match2_2.str(3));
                                                        current_user->restaurant.at(select - 1).open_hour.push_back(match2_2.str(4));
                                                        current_user->restaurant.at(select - 1).open_hour.push_back(index);
                                                    }
                                                    cout << "수정완료" << endl;
                                                    continue;
                                                }
                                                else {
                                                    continue;
                                                }
                                            }
                                            else
                                            {//주소
                                                bool check = false;
                                                for (int i = 0; i < 10; i++) {//주소검사
                                                    if (strcmp(str2.c_str(), V_address[i].c_str()) == 0) {
                                                        check = true;
                                                        break;
                                                    }
                                                    else {
                                                        check = false;
                                                    }
                                                }
                                                if (!(check)) {
                                                    cout << "주소 규칙위반" << endl;
                                                    continue;
                                                }
                                                else {
                                                    cout << "휴무일 " << str1 << "변경" << endl;
                                                    cout << "주소 " << str2 << "수정" << endl;
                                                    if (yesorno()) {
                                                        current_user->restaurant.at(select - 1).close_day.at(0) = str1;
                                                        for (k = 0; k < 7; k++) {
                                                            if (humooil[k] == str1) {
                                                                current_user->restaurant.at(select - 1).close_day.at(1) = to_string(k);
                                                                break;
                                                            }
                                                        }
                                                        current_user->restaurant.at(select - 1).address = str2;
                                                        cout << "수정 완료" << endl;
                                                    }
                                                    else continue;
                                                }
                                            }

                                        }
                                    }
                                    else if (regex_match(str2, Day_Checker))
                                    {//두번째 문자열이 시간
                                        for (int i = 0; i < str2.size(); i++) {
                                            str2[i] = tolower(str2[i]);
                                        }
                                        int k = 0;
                                        if (current_user->restaurant.at(select - 1).close_day.at(0) == str2) {
                                            //휴무삭제
                                                //시간 주소 판별
                                            if (regex_match(str1, match2_2, Time_Checker))
                                            {//시간

                                                current_user->restaurant.at(select - 1).open_hour.clear();
                                                if (stoi(match2_2.str(1)) == stoi(match2_2.str(3)) && stoi(match2_2.str(2)) == stoi(match2_2.str(4)))
                                                {
                                                    cout << "시작/종료 시간은 같을수 없습니다." << endl;
                                                    continue;
                                                }

                                                if (!(stoi(match2_2.str(1)) < 24 && stoi(match2_2.str(3)) < 24 && stoi(match2_2.str(2)) < 60 && stoi(match2_2.str(4)) < 60))
                                                {
                                                    cout << "24시간 형식에 맞춰주세요" << endl;
                                                    continue;
                                                }
                                                cout << "휴무일 " << str2 << "삭제" << endl;
                                                cout << "영업시간: " << str1 << endl;
                                                if (yesorno()) {
                                                    current_user->restaurant.at(select - 1).close_day.at(0) = "\0";
                                                    current_user->restaurant.at(select - 1).close_day.at(1) = "-1";
                                                    string humoo = current_user->restaurant.at(select - 1).close_day.at(0);
                                                    string index = current_user->restaurant.at(select - 1).close_day.at(1);
                                                    if (stoi(match2_2.str(1)) >= stoi(match2_2.str(3)) && stoi(match2_2.str(2)) >= stoi(match2_2.str(4))) {
                                                        //앞시간이 뒷시간 보다 크면나누어 저장
                                                        current_user->restaurant.at(select - 1).open_hour.push_back(match2_2.str(1));
                                                        current_user->restaurant.at(select - 1).open_hour.push_back(match2_2.str(2));
                                                        current_user->restaurant.at(select - 1).open_hour.push_back("23");
                                                        current_user->restaurant.at(select - 1).open_hour.push_back("59");
                                                        current_user->restaurant.at(select - 1).open_hour.push_back(index);
                                                        current_user->restaurant.at(select - 1).open_hour.push_back("00");
                                                        current_user->restaurant.at(select - 1).open_hour.push_back("00");
                                                        current_user->restaurant.at(select - 1).open_hour.push_back(match2_2.str(3));
                                                        current_user->restaurant.at(select - 1).open_hour.push_back(match2_2.str(4));
                                                        current_user->restaurant.at(select - 1).open_hour.push_back(to_string((stoi(index) + 1) % 7));
                                                    }
                                                    else {
                                                        //자정을 포함하지 않는 시간
                                                        current_user->restaurant.at(select - 1).open_hour.push_back(match2_2.str(1));
                                                        current_user->restaurant.at(select - 1).open_hour.push_back(match2_2.str(2));
                                                        current_user->restaurant.at(select - 1).open_hour.push_back(match2_2.str(3));
                                                        current_user->restaurant.at(select - 1).open_hour.push_back(match2_2.str(4));
                                                        current_user->restaurant.at(select - 1).open_hour.push_back(index);
                                                    }
                                                    cout << "수정완료" << endl;
                                                    break;
                                                }
                                                else {
                                                    continue;
                                                }
                                            }
                                            else
                                            {//주소
                                                bool check = false;
                                                for (int i = 0; i < 10; i++) {//주소검사
                                                    if (strcmp(str1.c_str(), V_address[i].c_str()) == 0) {
                                                        check = true;
                                                        break;
                                                    }
                                                    else {
                                                        check = false;
                                                    }
                                                }
                                                if (!(check)) {
                                                    cout << "주소 규칙위반" << endl;
                                                    continue;
                                                }
                                                else {
                                                    cout << "휴무일 " << str2 << "삭제" << endl;
                                                    cout << "주소 " << str1 << "수정" << endl;
                                                    if (yesorno()) {
                                                        current_user->restaurant.at(select - 1).close_day.at(0) = "\0";
                                                        current_user->restaurant.at(select - 1).close_day.at(1) = "-1";
                                                        current_user->restaurant.at(select - 1).address = str1;
                                                        cout << "수정 완료" << endl;
                                                    }
                                                    else continue;
                                                }
                                            }

                                        }
                                        else {
                                            //휴무변경

                                                //시간 주소 판별 
                                            if (regex_match(str1, match2_2, Time_Checker))
                                            {//시간
                                                current_user->restaurant.at(select - 1).open_hour.clear();
                                                if (stoi(match2_2.str(1)) == stoi(match2_2.str(3)) && stoi(match2_2.str(2)) == stoi(match2_2.str(4)))
                                                {
                                                    cout << "시작/종료 시간은 같을수 없습니다." << endl;
                                                    continue;
                                                }

                                                if (!(stoi(match2_2.str(1)) < 24 && stoi(match2_2.str(3)) < 24 && stoi(match2_2.str(2)) < 60 && stoi(match2_2.str(4)) < 60))
                                                {
                                                    cout << "24시간 형식에 맞춰주세요" << endl;
                                                    continue;
                                                }
                                                cout << "휴무일 " << str2 << " 변경" << endl;
                                                cout << "영업시간: " << str1 << endl;
                                                if (yesorno()) {
                                                    current_user->restaurant.at(select - 1).close_day.at(0) = str2;
                                                    for (k = 0; k < 7; k++) {
                                                        if (humooil[k] == str2) {
                                                            current_user->restaurant.at(select - 1).close_day.at(1) = to_string(k);
                                                            break;
                                                        }
                                                    }
                                                    string humoo = current_user->restaurant.at(select - 1).close_day.at(0);
                                                    string index = current_user->restaurant.at(select - 1).close_day.at(1);
                                                    if (stoi(match2_2.str(1)) >= stoi(match2_2.str(3)) && stoi(match2_2.str(2)) >= stoi(match2_2.str(4))) {
                                                        //앞시간이 뒷시간 보다 크면나누어 저장
                                                        current_user->restaurant.at(select - 1).open_hour.push_back(match2_2.str(1));
                                                        current_user->restaurant.at(select - 1).open_hour.push_back(match2_2.str(2));
                                                        current_user->restaurant.at(select - 1).open_hour.push_back("23");
                                                        current_user->restaurant.at(select - 1).open_hour.push_back("59");
                                                        current_user->restaurant.at(select - 1).open_hour.push_back(index);
                                                        current_user->restaurant.at(select - 1).open_hour.push_back("00");
                                                        current_user->restaurant.at(select - 1).open_hour.push_back("00");
                                                        current_user->restaurant.at(select - 1).open_hour.push_back(match2_2.str(3));
                                                        current_user->restaurant.at(select - 1).open_hour.push_back(match2_2.str(4));
                                                        current_user->restaurant.at(select - 1).open_hour.push_back(to_string((stoi(index) + 1) % 7));
                                                    }
                                                    else {
                                                        //자정을 포함하지 않는 시간
                                                        current_user->restaurant.at(select - 1).open_hour.push_back(match2_2.str(1));
                                                        current_user->restaurant.at(select - 1).open_hour.push_back(match2_2.str(2));
                                                        current_user->restaurant.at(select - 1).open_hour.push_back(match2_2.str(3));
                                                        current_user->restaurant.at(select - 1).open_hour.push_back(match2_2.str(4));
                                                        current_user->restaurant.at(select - 1).open_hour.push_back(index);
                                                    }
                                                    cout << "수정완료" << endl;
                                                    continue;
                                                }
                                                else {
                                                    continue;
                                                }
                                            }
                                            else
                                            {//주소
                                                bool check = false;
                                                for (int i = 0; i < 10; i++) {//주소검사
                                                    if (strcmp(str1.c_str(), V_address[i].c_str()) == 0) {
                                                        check = true;
                                                        break;
                                                    }
                                                    else {
                                                        check = false;
                                                    }
                                                }
                                                if (!(check)) {
                                                    cout << "주소 규칙위반" << endl;
                                                    continue;
                                                }
                                                else {
                                                    cout << "휴무일 " << str2 << "변경" << endl;
                                                    cout << "주소 " << str1 << "수정" << endl;
                                                    if (yesorno()) {
                                                        current_user->restaurant.at(select - 1).close_day.at(0) = str2;
                                                        for (k = 0; k < 7; k++) {
                                                            if (humooil[k] == str2) {
                                                                current_user->restaurant.at(select - 1).close_day.at(1) = to_string(k);
                                                                break;
                                                            }
                                                        }
                                                        current_user->restaurant.at(select - 1).address = str1;
                                                        cout << "수정 완료" << endl;
                                                    }
                                                    else continue;
                                                }
                                            }

                                        }
                                    }
                                    else
                                    {//주소(str1)or시간(str2)의 조합
                                        string temp;
                                        if (regex_match(str1, Time_Checker)) {//str1이 시간이면 swap
                                            temp = str1;
                                            str1 = str2;
                                            str2 = str1;
                                        }
                                        bool check = false;
                                        for (int i = 0; i < 10; i++) {//주소검사
                                            if (strcmp(str1.c_str(), V_address[i].c_str()) == 0) {
                                                check = true;
                                                break;
                                            }
                                            else {
                                                check = false;
                                            }
                                        }
                                        if (!(check)) {
                                            cout << "주소 규칙위반" << endl;
                                            continue;
                                        }
                                        else {//주소 검사 통과
                                            cout << "주소 변경 " << str1 << endl;
                                            cout << "영업 시간 " << str2 << endl;
                                            if (yesorno()) {
                                                current_user->restaurant.at(select - 1).address = str1;
                                                string humoo = current_user->restaurant.at(select - 1).close_day.at(0);
                                                string index = current_user->restaurant.at(select - 1).close_day.at(1);
                                                if (stoi(match2_2.str(1)) >= stoi(match2_2.str(3)) && stoi(match2_2.str(2)) >= stoi(match2_2.str(4))) {
                                                    //앞시간이 뒷시간 보다 크면나누어 저장
                                                    current_user->restaurant.at(select - 1).open_hour.push_back(match2_2.str(1));
                                                    current_user->restaurant.at(select - 1).open_hour.push_back(match2_2.str(2));
                                                    current_user->restaurant.at(select - 1).open_hour.push_back("23");
                                                    current_user->restaurant.at(select - 1).open_hour.push_back("59");
                                                    current_user->restaurant.at(select - 1).open_hour.push_back(index);
                                                    current_user->restaurant.at(select - 1).open_hour.push_back("00");
                                                    current_user->restaurant.at(select - 1).open_hour.push_back("00");
                                                    current_user->restaurant.at(select - 1).open_hour.push_back(match2_2.str(3));
                                                    current_user->restaurant.at(select - 1).open_hour.push_back(match2_2.str(4));
                                                    current_user->restaurant.at(select - 1).open_hour.push_back(to_string((stoi(index) + 1) % 7));
                                                }
                                                else {
                                                    //자정을 포함하지 않는 시간
                                                    current_user->restaurant.at(select - 1).open_hour.push_back(match2_2.str(1));
                                                    current_user->restaurant.at(select - 1).open_hour.push_back(match2_2.str(2));
                                                    current_user->restaurant.at(select - 1).open_hour.push_back(match2_2.str(3));
                                                    current_user->restaurant.at(select - 1).open_hour.push_back(match2_2.str(4));
                                                    current_user->restaurant.at(select - 1).open_hour.push_back(index);
                                                }
                                                cout << "수정완료" << endl;
                                                continue;
                                            }
                                            else {
                                                continue;
                                            }
                                        }
                                    }
                                    continue;
                                }
                                else
                                {//세개의 정보
                                    vector<string> str;
                                    smatch match3;
                                    vector<char*>stv;
                                    char* ptr1 = strtok(data_buff, "/");
                                    while (ptr1 != nullptr) {
                                        stv.push_back(ptr1);
                                        ptr1 = strtok(NULL, "/");
                                    }
                                    if (stv.size() == 3) {
                                        str.push_back((string)stv[0]);
                                        str.push_back((string)stv[1]);
                                        str.push_back((string)stv[2]);
                                        trim(str.at(0));
                                        trim(str.at(1));
                                        trim(str.at(2));
                                    }
                                    else {
                                        cout << "데이터 개수 부족" << endl;
                                        continue;
                                    }
                                    cout << str.at(0) << "/" << str.at(1) << "/" << str.at(2) << endl;

                                    //요일을 str.[0]
                                    string day, adr, time;
                                    for (int i = 0; i < 3; i++) {
                                        if (regex_match(str.at(i), Day_Checker))
                                            day = str.at(i);
                                        else if (regex_match(str.at(i), Time_Checker))
                                            time = str.at(i);
                                        else
                                            adr = str.at(i);
                                    }

                                    cout << day << "/" << time << "/" << adr << endl;
                                    for (int i = 0; i < day.size(); i++) {
                                        day[i] = tolower(day[i]);
                                    }
                                    int k = 0;
                                    if (current_user->restaurant.at(select - 1).close_day.at(0) == day) {
                                        //휴무삭제
                                            //시간 주소 판별
                                        if (regex_match(time, match3, Time_Checker))
                                        {//시간

                                            current_user->restaurant.at(select - 1).open_hour.clear();
                                            if (stoi(match3.str(1)) == stoi(match3.str(3)) && stoi(match3.str(2)) == stoi(match3.str(4)))
                                            {
                                                cout << "시작/종료 시간은 같을수 없습니다." << endl;
                                                continue;
                                            }

                                            if (!(stoi(match3.str(1)) < 24 && stoi(match3.str(3)) < 24 && stoi(match3.str(2)) < 60 && stoi(match3.str(4)) < 60))
                                            {
                                                cout << "24시간 형식에 맞춰주세요" << endl;
                                                continue;
                                            }
                                            bool check = false;
                                            for (int i = 0; i < 10; i++) {//주소검사
                                                if (strcmp(adr.c_str(), V_address[i].c_str()) == 0) {
                                                    check = true;
                                                    break;
                                                }
                                                else {
                                                    check = false;
                                                }
                                            }
                                            if (!(check)) {
                                                cout << "주소 규칙위반" << endl;
                                                continue;
                                            }
                                            cout << "휴무일 " << day << "삭제" << endl;
                                            cout << "영업시간: " << time << endl;
                                            cout << "주소: " << adr << endl;
                                            if (yesorno()) {
                                                current_user->restaurant.at(select - 1).address = adr;
                                                current_user->restaurant.at(select - 1).close_day.at(0) = "\0";
                                                current_user->restaurant.at(select - 1).close_day.at(1) = "-1";
                                                string humoo = current_user->restaurant.at(select - 1).close_day.at(0);
                                                string index = current_user->restaurant.at(select - 1).close_day.at(1);
                                                if (stoi(match3.str(1)) >= stoi(match3.str(3)) && stoi(match3.str(2)) >= stoi(match3.str(4))) {
                                                    //앞시간이 뒷시간 보다 크면나누어 저장
                                                    current_user->restaurant.at(select - 1).open_hour.push_back(match3.str(1));
                                                    current_user->restaurant.at(select - 1).open_hour.push_back(match3.str(2));
                                                    current_user->restaurant.at(select - 1).open_hour.push_back("23");
                                                    current_user->restaurant.at(select - 1).open_hour.push_back("59");
                                                    current_user->restaurant.at(select - 1).open_hour.push_back(index);
                                                    current_user->restaurant.at(select - 1).open_hour.push_back("00");
                                                    current_user->restaurant.at(select - 1).open_hour.push_back("00");
                                                    current_user->restaurant.at(select - 1).open_hour.push_back(match3.str(3));
                                                    current_user->restaurant.at(select - 1).open_hour.push_back(match3.str(4));
                                                    current_user->restaurant.at(select - 1).open_hour.push_back(to_string((stoi(index) + 1) % 7));
                                                }
                                                else {
                                                    //자정을 포함하지 않는 시간
                                                    current_user->restaurant.at(select - 1).open_hour.push_back(match3.str(1));
                                                    current_user->restaurant.at(select - 1).open_hour.push_back(match3.str(2));
                                                    current_user->restaurant.at(select - 1).open_hour.push_back(match3.str(3));
                                                    current_user->restaurant.at(select - 1).open_hour.push_back(match3.str(4));
                                                    current_user->restaurant.at(select - 1).open_hour.push_back(index);
                                                }
                                                cout << "수정완료" << endl;
                                                break;
                                            }
                                            else {
                                                continue;
                                            }
                                        }
                                        else
                                        {//주소
                                            continue;
                                        }

                                    }
                                    else {
                                        //휴무변경

                                            //시간 주소 판별 
                                        if (regex_match(time, match3, Time_Checker))
                                        {//시간
                                            current_user->restaurant.at(select - 1).open_hour.clear();
                                            if (stoi(match3.str(1)) == stoi(match3.str(3)) && stoi(match3.str(2)) == stoi(match3.str(4)))
                                            {
                                                cout << "시작/종료 시간은 같을수 없습니다." << endl;
                                                continue;
                                            }

                                            if (!(stoi(match3.str(1)) < 24 && stoi(match3.str(3)) < 24 && stoi(match3.str(2)) < 60 && stoi(match3.str(4)) < 60))
                                            {
                                                cout << "24시간 형식에 맞춰주세요" << endl;
                                                continue;
                                            }
                                            bool check = false;
                                            for (int i = 0; i < 10; i++) {//주소검사
                                                if (strcmp(adr.c_str(), V_address[i].c_str()) == 0) {
                                                    check = true;
                                                    break;
                                                }
                                                else {
                                                    check = false;
                                                }
                                            }
                                            if (!(check)) {
                                                cout << "주소 규칙위반" << endl;
                                                continue;
                                            }
                                            cout << "휴무일 " << day << " 변경" << endl;
                                            cout << "영업시간: " << time << endl;
                                            cout << "주소: " << adr << endl;
                                            if (yesorno()) {
                                                current_user->restaurant.at(select - 1).address = adr;
                                                current_user->restaurant.at(select - 1).close_day.at(0) = day;
                                                for (k = 0; k < 7; k++) {
                                                    if (humooil[k] == day) {
                                                        current_user->restaurant.at(select - 1).close_day.at(1) = to_string(k);
                                                        break;
                                                    }
                                                }
                                                string humoo = current_user->restaurant.at(select - 1).close_day.at(0);
                                                string index = current_user->restaurant.at(select - 1).close_day.at(1);
                                                if (stoi(match3.str(1)) >= stoi(match3.str(3)) && stoi(match3.str(2)) >= stoi(match3.str(4))) {
                                                    //앞시간이 뒷시간 보다 크면나누어 저장
                                                    current_user->restaurant.at(select - 1).open_hour.push_back(match3.str(1));
                                                    current_user->restaurant.at(select - 1).open_hour.push_back(match3.str(2));
                                                    current_user->restaurant.at(select - 1).open_hour.push_back("23");
                                                    current_user->restaurant.at(select - 1).open_hour.push_back("59");
                                                    current_user->restaurant.at(select - 1).open_hour.push_back(index);
                                                    current_user->restaurant.at(select - 1).open_hour.push_back("00");
                                                    current_user->restaurant.at(select - 1).open_hour.push_back("00");
                                                    current_user->restaurant.at(select - 1).open_hour.push_back(match3.str(3));
                                                    current_user->restaurant.at(select - 1).open_hour.push_back(match3.str(4));
                                                    current_user->restaurant.at(select - 1).open_hour.push_back(to_string((stoi(index) + 1) % 7));
                                                }
                                                else {
                                                    //자정을 포함하지 않는 시간
                                                    current_user->restaurant.at(select - 1).open_hour.push_back(match3.str(1));
                                                    current_user->restaurant.at(select - 1).open_hour.push_back(match3.str(2));
                                                    current_user->restaurant.at(select - 1).open_hour.push_back(match3.str(3));
                                                    current_user->restaurant.at(select - 1).open_hour.push_back(match3.str(4));
                                                    current_user->restaurant.at(select - 1).open_hour.push_back(index);
                                                }
                                                cout << "수정완료" << endl;
                                                continue;
                                            }
                                            else {
                                                continue;
                                            }
                                        }
                                        else
                                        {
                                            continue;
                                        }

                                    }






                                    continue;
                                }

                            }
                        }
                        else
                            cout << "다시 입력해 주세요" << endl;

                        if (cin.fail()) {
                            cin.clear();
                            cin.ignore(INT_MAX, '\n');
                            cout << "다시 입력해주세요" << endl;
                        }
                    }
                }
            }
            else {
                //need info
                while (true) {
                    cout << "부가정보 등록" << endl;
                    cout << "1. 메뉴/가격 등록 \n2. 시간/휴무일 등록 \n3. 이전메뉴" << endl;
                    cout << "보기 선택: ";
                    int select_menu;
                    cin >> select_menu;
                    cin.ignore();//버퍼 제거 
                    if (select_menu <= 3 && select_menu >= 1) {
                        if (select_menu == 3) break;
                        else if (select_menu == 1)
                        {
                            if (!current_user->restaurant.at(select - 1).menu.empty()) {
                                cout << "이미 메뉴가 등록되어 있습니다" << endl;
                                continue;
                            }
                            string M_name, M_price, temp;
                            string input;
                            regex M_name_Checker("[a-zA-Z\\s]*");
                            regex M_price_Checker("^[1-9]?(,|[0-9])[\\S]*");
                            while (true) {
                                cout << "메뉴/가격정보: ";
                                getline(cin, input);
                                char* data_buff = new char[input.size() + 1];
                                strcpy(data_buff, input.c_str());
                                //trim(input);//앞뒤공백은 자르기
                                int scount = 0;
                                for (int i = 0; i < input.size(); i++) {
                                    if ((int)input[i] == 47)
                                        scount++;
                                }
                                cout << "scount : " << scount << endl;

                                if (scount != 1) {
                                    if (isQuit(input)) break;
                                    cout << "슬래시 개수부족" << endl;
                                    continue;//슬래시 1개 아니면 다시입력받기
                                }
                                trim(input);//앞뒤공백은 자르기
                                if (!isQuit(input)) {
                                    vector<char*>stv;
                                    char* ptr1 = strtok(data_buff, "/");
                                    while (ptr1 != nullptr) {
                                        stv.push_back(ptr1);
                                        ptr1 = strtok(NULL, "/");
                                    }
                                    if (stv.size() == 2) {
                                        M_name = (string)stv[0];
                                        M_price = (string)stv[1];
                                    }
                                    else {
                                        cout << "데이터 개수 부족" << endl;
                                        continue;
                                    }
                                    trim(M_name);
                                    trim(M_price);
                                    if (regex_match(M_name, M_name_Checker))
                                    {
                                        for (int i = 0; i < M_name.size(); i++) {
                                            M_name[i] = tolower(M_name[i]);
                                        }
                                        if (!regex_match(M_price, M_price_Checker)) {
                                            cout << "가격 형식 확인" << endl;
                                            continue;
                                        }

                                        if (M_price.find(",") != -1) {
                                            while (M_price.find(",") != -1)
                                                M_price.replace(M_price.find(","), 1, "");
                                        }

                                        cout << "메뉴이름: " << M_name << endl;
                                        cout << "메뉴가격: " << M_price << endl;
                                        if (yesorno()) {
                                            current_user->restaurant.at(select - 1).menu.push_back(Menu(M_name, M_price));
                                            //menu.push_back(Menu(price, M_name));
                                            cout << "등록완료!" << endl;
                                            break;
                                        }
                                        else {
                                            continue;
                                        }
                                    }
                                    else if (regex_match(M_price, M_name_Checker))
                                    {
                                        temp = M_price;
                                        M_price = M_name;
                                        M_name = temp;
                                        for (int i = 0; i < M_name.size(); i++) {
                                            M_name[i] = tolower(M_name[i]);
                                        }
                                        if (!regex_match(M_price, M_price_Checker)) {
                                            cout << "가격 형식 확인" << endl;
                                            continue;
                                        }
                                        if (M_price.find(",") != -1) {
                                            while (M_price.find(",") != -1)
                                                M_price.replace(M_price.find(","), 1, "");
                                        }
                                        cout << "메뉴이름: " << M_name << endl;
                                        cout << "메뉴가격: " << M_price << endl;
                                        if (yesorno()) {
                                            current_user->restaurant.at(select - 1).menu.push_back(Menu(M_name, M_price));
                                            cout << "등록완료!" << endl;
                                            break;
                                        }
                                        else {
                                            continue;
                                        }
                                    }
                                    else {//둘다 정규식 안맞음->재입력
                                        cout << "메뉴/가격 형식 확인바람" << endl;
                                        continue;
                                    }
                                }
                                else
                                {
                                    return;
                                }
                            }
                        }
                        else if (select_menu == 2)
                        {
                            if (!current_user->restaurant.at(select - 1).open_hour.empty()) {
                                cout << "이미 부가정보가 등록되어 있습니다" << endl;
                                continue;
                            }
                            string hour, close_day, temp;
                            string input;
                            regex Time_Checker("([0-9]{1,2})\:([0-9]{1,2})\~([0-9]{1,2})\:([0-9]{1,2})*$");
                            regex Day_Checker("^[a-zA-Z]+(DAY|DAy|DaY|Day|day|daY|dAY|dAy)$");
                            while (true) {
                                cout << "시간/휴무정보: ";
                                getline(cin, input);
                                char* data_buff = new char[input.size() + 1];
                                strcpy(data_buff, input.c_str());
                                //trim(input);//앞뒤공백은 자르기
                                int scount = 0;
                                for (int i = 0; i < input.size(); i++) {
                                    if ((int)input[i] == 47)
                                        scount++;
                                }
                                cout << "scount : " << scount << endl;

                                if (scount != 1) {
                                    if (isQuit(input)) break;
                                    smatch match;
                                    if (regex_match(input, match, Time_Checker)) {
                                        if (stoi(match.str(1)) == stoi(match.str(3)) && stoi(match.str(2)) == stoi(match.str(4)))
                                        {
                                            cout << "시작/종료 시간은 같을수 없습니다." << endl;
                                            continue;
                                        }

                                        if (!(stoi(match.str(1)) < 24 && stoi(match.str(3)) < 24 && stoi(match.str(2)) < 60 && stoi(match.str(4)) < 60))
                                        {
                                            cout << "24시간 형식에 맞춰주세요" << endl;
                                            continue;
                                        }
                                        cout << "영업시간: " << input << endl;
                                        cout << "휴무일 없음" << endl;
                                        if (yesorno()) {
                                            current_user->restaurant.at(select - 1).close_day.push_back("\0");
                                            current_user->restaurant.at(select - 1).close_day.push_back(to_string(-1));
                                            //휴무일이랑 인덱스 저장
                                            if (stoi(match.str(1)) >= stoi(match.str(3)) && stoi(match.str(2)) >= stoi(match.str(4))) {
                                                //앞시간이 뒷시간 보다 크면나누어 저장
                                                current_user->restaurant.at(select - 1).open_hour.push_back(match.str(1));
                                                current_user->restaurant.at(select - 1).open_hour.push_back(match.str(2));
                                                current_user->restaurant.at(select - 1).open_hour.push_back("23");
                                                current_user->restaurant.at(select - 1).open_hour.push_back("59");
                                                current_user->restaurant.at(select - 1).open_hour.push_back(to_string(-1));

                                                current_user->restaurant.at(select - 1).open_hour.push_back("00");
                                                current_user->restaurant.at(select - 1).open_hour.push_back("00");
                                                current_user->restaurant.at(select - 1).open_hour.push_back(match.str(3));
                                                current_user->restaurant.at(select - 1).open_hour.push_back(match.str(4));
                                                current_user->restaurant.at(select - 1).open_hour.push_back(to_string(-1));
                                            }
                                            else {
                                                //자정을 포함하지 않는 시간
                                                current_user->restaurant.at(select - 1).open_hour.push_back(match.str(1));
                                                current_user->restaurant.at(select - 1).open_hour.push_back(match.str(2));
                                                current_user->restaurant.at(select - 1).open_hour.push_back(match.str(3));
                                                current_user->restaurant.at(select - 1).open_hour.push_back(match.str(4));
                                                current_user->restaurant.at(select - 1).open_hour.push_back(to_string(-1));
                                            }
                                            cout << "등록완료" << endl;
                                            break;
                                        }
                                        else {
                                            continue;
                                        }
                                    }
                                    else {
                                        cout << "시간 형식 확인" << endl;
                                        continue;
                                    }
                                    cout << "슬래시 개수부족" << endl;
                                    continue;//슬래시 1개 아니면 다시입력받기
                                }
                                trim(input);//앞뒤공백은 자르기
                                if (!isQuit(input)) {
                                    vector<char*>stv;
                                    char* ptr1 = strtok(data_buff, "/");
                                    while (ptr1 != nullptr) {
                                        stv.push_back(ptr1);
                                        ptr1 = strtok(NULL, "/");
                                    }
                                    if (stv.size() == 2) {
                                        hour = (string)stv[0];
                                        close_day = (string)stv[1];
                                    }
                                    else {
                                        cout << "데이터 개수 부족" << endl;
                                        continue;
                                    }
                                    trim(hour);
                                    trim(close_day);
                                    smatch match;
                                    if (regex_match(close_day, Day_Checker))
                                    {
                                        for (int i = 0; i < close_day.size(); i++) {
                                            close_day[i] = tolower(close_day[i]);
                                        }

                                        if (regex_match(hour, match, Time_Checker)) {
                                            if (stoi(match.str(1)) == stoi(match.str(3)) && stoi(match.str(2)) == stoi(match.str(4)))
                                            {
                                                cout << "시작/종료 시간은 같을수 없습니다." << endl;
                                                continue;
                                            }

                                            if (!(stoi(match.str(1)) < 24 && stoi(match.str(3)) < 24 && stoi(match.str(2)) < 60 && stoi(match.str(4)) < 60))
                                            {
                                                cout << "24시간 형식에 맞춰주세요" << endl;
                                                continue;
                                            }
                                            cout << "영업시간: " << hour << endl;
                                            cout << "휴무일: " << close_day << endl;
                                            if (yesorno()) {
                                                current_user->restaurant.at(select - 1).close_day.push_back(close_day);
                                                int i = 0;
                                                for (int i = 0; i < 7; i++) {
                                                    if (humooil[i] == close_day) {
                                                        current_user->restaurant.at(select - 1).close_day.push_back(to_string(i));
                                                        break;
                                                    }
                                                } //휴무일이랑 인덱스 저장
                                                if (stoi(match.str(1)) >= stoi(match.str(3)) && stoi(match.str(2)) >= stoi(match.str(4))) {
                                                    //앞시간이 뒷시간 보다 크면나누어 저장
                                                    current_user->restaurant.at(select - 1).open_hour.push_back(match.str(1));
                                                    current_user->restaurant.at(select - 1).open_hour.push_back(match.str(2));
                                                    current_user->restaurant.at(select - 1).open_hour.push_back("23");
                                                    current_user->restaurant.at(select - 1).open_hour.push_back("59");
                                                    current_user->restaurant.at(select - 1).open_hour.push_back(to_string(i));
                                                    cout << to_string(i) << endl;
                                                    current_user->restaurant.at(select - 1).open_hour.push_back("00");
                                                    current_user->restaurant.at(select - 1).open_hour.push_back("00");
                                                    current_user->restaurant.at(select - 1).open_hour.push_back(match.str(3));
                                                    current_user->restaurant.at(select - 1).open_hour.push_back(match.str(4));
                                                    current_user->restaurant.at(select - 1).open_hour.push_back(to_string((i + 1) % 7));
                                                }
                                                else {
                                                    //자정을 포함하지 않는 시간
                                                    current_user->restaurant.at(select - 1).open_hour.push_back(match.str(1));
                                                    current_user->restaurant.at(select - 1).open_hour.push_back(match.str(2));
                                                    current_user->restaurant.at(select - 1).open_hour.push_back(match.str(3));
                                                    current_user->restaurant.at(select - 1).open_hour.push_back(match.str(4));
                                                    current_user->restaurant.at(select - 1).open_hour.push_back(to_string(i));
                                                }
                                                cout << "등록완료" << endl;
                                                break;
                                            }
                                            else {
                                                continue;
                                            }
                                        }
                                        else {
                                            cout << "시간 형식 확인" << endl;
                                            continue;
                                        }
                                    }
                                    else if (regex_match(hour, Day_Checker))
                                    {
                                        temp = hour;
                                        hour = close_day;
                                        close_day = temp;
                                        for (int i = 0; i < close_day.size(); i++) {
                                            close_day[i] = tolower(close_day[i]);
                                        }

                                        if (regex_match(hour, match, Time_Checker)) {
                                            if (stoi(match.str(1)) == stoi(match.str(3)) && stoi(match.str(2)) == stoi(match.str(4)))
                                            {
                                                cout << "시작/종료 시간은 같을수 없습니다." << endl;
                                                continue;
                                            }

                                            if (!(stoi(match.str(1)) < 24 && stoi(match.str(3)) < 24 && stoi(match.str(2)) < 60 && stoi(match.str(4)) < 60))
                                            {
                                                cout << "24시간 형식에 맞춰주세요" << endl;
                                                continue;
                                            }
                                            cout << "영업시간: " << hour << endl;
                                            cout << "휴무일: " << close_day << endl;
                                            if (yesorno()) {
                                                current_user->restaurant.at(select - 1).close_day.push_back(close_day);
                                                int i = 0;
                                                for (int i = 0; i < 7; i++) {
                                                    if (humooil[i] == close_day) {
                                                        current_user->restaurant.at(select - 1).close_day.push_back(to_string(i));
                                                        break;
                                                    }
                                                } //휴무일이랑 인덱스 저장
                                                if (stoi(match.str(1)) >= stoi(match.str(3)) && stoi(match.str(2)) >= stoi(match.str(4))) {
                                                    //앞시간이 뒷시간 보다 크면나누어 저장
                                                    current_user->restaurant.at(select - 1).open_hour.push_back(match.str(1));
                                                    current_user->restaurant.at(select - 1).open_hour.push_back(match.str(2));
                                                    current_user->restaurant.at(select - 1).open_hour.push_back("23");
                                                    current_user->restaurant.at(select - 1).open_hour.push_back("59");
                                                    current_user->restaurant.at(select - 1).open_hour.push_back(to_string(i));
                                                    cout << to_string(i) << endl;
                                                    current_user->restaurant.at(select - 1).open_hour.push_back("00");
                                                    current_user->restaurant.at(select - 1).open_hour.push_back("00");
                                                    current_user->restaurant.at(select - 1).open_hour.push_back(match.str(3));
                                                    current_user->restaurant.at(select - 1).open_hour.push_back(match.str(4));
                                                    current_user->restaurant.at(select - 1).open_hour.push_back(to_string((i + 1) % 7));
                                                }
                                                else {
                                                    //자정을 포함하지 않는 시간
                                                    current_user->restaurant.at(select - 1).open_hour.push_back(match.str(1));
                                                    current_user->restaurant.at(select - 1).open_hour.push_back(match.str(2));
                                                    current_user->restaurant.at(select - 1).open_hour.push_back(match.str(3));
                                                    current_user->restaurant.at(select - 1).open_hour.push_back(match.str(4));
                                                    current_user->restaurant.at(select - 1).open_hour.push_back(to_string(i));
                                                }
                                                cout << "등록완료" << endl;
                                                break;
                                            }
                                            else {
                                                continue;
                                            }
                                        }
                                        else {
                                            cout << "시간 형식 확인" << endl;
                                            continue;
                                        }
                                    }
                                    else {//둘다 정규식 안맞음->재입력
                                        cout << "휴무일/시간 형식 확인바람" << endl;
                                        continue;
                                    }
                                }
                                else
                                {
                                    return;
                                }
                            }
                        }
                    }
                    else
                        cout << "다시 입력해 주세요" << endl;

                    if (cin.fail()) {
                        cin.clear();
                        cin.ignore(INT_MAX, '\n');
                        cout << "다시 입력해주세요" << endl;
                    }
                }
            }
        }
        else {
            cout << "다시 입력해 주세요\n\n" << endl;
        }
        if (cin.fail()) {
            cin.clear();
            cin.ignore(INT_MAX, '\n');
            cout << "다시 입력해주세요" << endl;

        }
    }
}


string Manager::getDayIndex(string str)
{
    if (!strcmp(str.c_str(), "monday")) return "0";
    else if (!strcmp(str.c_str(), "tuesday")) return "1";
    else if (!strcmp(str.c_str(), "wednesday")) return "2";
    else if (!strcmp(str.c_str(), "thursday")) return "3";
    else if (!strcmp(str.c_str(), "friday")) return "4";
    else if (!strcmp(str.c_str(), "saturday")) return "5";
    else if (!strcmp(str.c_str(), "sunday")) return "6";
    else return "-1";
}



bool Manager::isin0to128(string str)
{
   int i = 0;
   cout << str << endl;
   for (i = 0; i < str.size(); i++) {
      if (!(((int)str[i] >= 0) && ((int)str[i] <= 127))) {
         return false;
      }
   }
   return true;
}


bool Manager::isQuit(string str)
{
   if (!strcmp(str.c_str(), "quit")) return true;
   return false;
}

bool Manager::isSpace(string str)
{
   for (int i = 0; i < str.length(); i++) {
      const char* check = str.c_str();
      if (isspace(check[i])) {
         cout << "공백없이 입력해주세요" << endl;
         return true;
      }
   }
   return false;
}

bool Manager::isTwoSlash(string s)
{
   return false;
}


Manager::Manager()
{
   V_address = new string [10];
   for (int i = 0; i < 10; i++) {
      V_address[i] = "hwayang" + to_string(i + 1) + "dong";
   }
   humooil = new string[7];
   humooil[0] = "monday";
   humooil[1] = "tuesday";
   humooil[2] = "wednesday";
   humooil[3] = "thusday";
   humooil[4] = "friday";
   humooil[5] = "saturday";
   humooil[6] = "sunday";
}

Manager::~Manager()
{
}
void Manager::ltrim(string& s)
{
   s.erase(s.begin(), find_if(s.begin(), s.end(), [](unsigned char ch) {
      return !isspace(ch);
      }));
}

void Manager::rtrim(string& s)
{
   s.erase(find_if(s.rbegin(), s.rend(), [](unsigned char ch) {
      return !isspace(ch);
      }).base(), s.end());
}

void Manager::trim(string& s)
{
   cout << "나는 trime" << endl;
   ltrim(s);
   rtrim(s);
}
